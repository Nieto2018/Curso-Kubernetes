https://kubernetes.io/docs/reference/kubectl/cheatsheet/

# Display addresses of the control plane and services with label kubernetes.io/cluster-service=true. To further debug and
# diagnose cluster problems, use 'kubectl cluster-info dump'.
kubectl cluster-info

# Muestra los contextos
kubectl config get-contexts

# Muestra el contexto actual
kubectl config current-context

# Muestra la configuración del contexto actual
kubectl config view

# Obtiene todo los tipos de elementos de kubernetes
kubectl api-resources

# Muestra las versiones de las API soportadas por el servidor in la forma de <grupo>/version
kubectl api-versions

# Crea objetos o le aplica cambios a partir de un archivo yaml
# Si un mismo archivo de Deployment cambia crea un nuevo ReplicaSet que equivale a una revisión
kubectl apply -f <ruta_yaml>

# Para Deployments, registra el comando en el CHANGE-CAUSE del history
# Si un mismo archivo de Deployment cambia crea un nuevo ReplicaSet que equivale a una revisión
kubectl apply -f <ruta_yaml> --record

# Borrar todo los objetos creados a partir de un archivo yaml
kubectl delete -f <ruta_yaml>

# Crea un pod con una imagen concreta
kubectl run podtest --image=nginx:alpine

# Obtener pods u otro objetos
kubectl get <objeto>
kubectl get pods

# Obtener pods u otro objetos de forma constante
kubectl get pods --watch

# Obtener pods u otro objetos con más detalles
kubectl get pods -o wide

# Obtener pods u otro objetos que tengan un cierto label
kubectl get <objeto> -l <label>=<valor_label>
kubectl get pods -l app=pod-label

# Obtener yaml/json de configuración de los pods u otro objetos
kubectl get <objeto> -o yaml/json
kubectl get pods -o yaml

# Describir pods u otro objetos
kubectl describe pods

# Muestra los logs de un contenedor de un pod pods
kubectl logs <nombre_pod> <nombre_contenedor>
kubectl logs dos-contenedores cont2

# Borrar pods u otros objetos
kubectl delete <objeto> <nombre_objeto>
kubectl delete pod <nombre_pod>

# Lanza un comando en uno de los contenedores del pod
kubectl exec -it <nombre_pod> -- <comando>
kubectl exec -it dos-contenedores -- sh

# Lanza un comando en el contenedor indicado del pod
kubectl exec -it <nombre_pod> -c <nombre_contenedor> -- <comando>
kubectl exec -it dos-contenedores -c cont2 -- sh

# Mapea los puertos de un pod
kubectl port-forward <nombre_pod> <puerto_maquina>:<puerto_pod>
kubectl port-forward dos-contenedores 8082:8082

# Muestra el estado de un deployment
kubectl rollout status deployment <nobre_deployment>
kubectl rollout status deployment deployment-test
kubectl rollout status deploy deployment-test

# Muestra las revisiones, que equivale a ReplicaSets, de un deployment
kubectl rollout history deployment <nobre_deployment>
kubectl rollout history deployment deployment-test

# Muestra los cambios de la revisión en el deployment
kubectl rollout history deployment <nombre_deployment> --revision=<numero_revision>
kubectl rollout history deployment deployment-test --revision=2

# Vuelve a la revisión indicada
kubectl rollout undo deployment <nombre_deployment> --to-revision=<numero_revision>
kubectl rollout undo deployment deployment-test --to-revision=6

# Muestra el enlace para el acceso a un servicio de tipo NodePort
# En el caso de minikube coincide con la IP que le asigna Docker
minikube service <nombre_servicio> --url
minikube service my-service --url

# Acceder a un servicio que está en otro namespace, ejemplo con curl
curl <nombre_servicio>.<nombre_namespace>.svc.cluster.local
curl backend-k8s-hands-on.ci.svc.cluster.local

# Crear contexto
kubectl config set-context <nombre_contexto> --namespace=<nombre_namespace> --cluster=<nombre_cluster> --user=<nombre_usuario>
kubectl config set-context ci-context --namespace=ci --cluster=minikube --user=minikube

# Cambiar de contexto
kubectl config use-context <nombre_contexto>
kubectl config use-context ci-context

# Crear configmap desde archivo
kubectl create configmap <nombre_configmap> --from-file=<ruta_fichero>
kubectl create configmap nginx-config --from-file=configmaps-examples/nginx.conf 

# Crear secret desde archivo
kubectl create secret <tipo_secret> <nombre_secret> --from-file=<ruta_fichero>
kubectl create secret generic mysecret --from-file=./test.txt

# Decodificar contenido de un secret (data)
echo <data> | base64 --decode
echo c2VjcmV0MT1ob2xhCnNlY3JldDI9YWRpb3M | base64 --decode

# Codificar una cadena
echo <cadena> | base64
echo hola | base64

# Reemplazar las variables de entornos en archivo en la shell con la aplicación "envsubst"
# Las variables las tenemos que definir previamente en nuestra máquina
# Sirve para evitar meter la información en git y que solo sea posible desencriptarlos en la misma máquina
envsubst <ruta_fichero_con_variables> > <ruta_fichero_con_variables_sustituidas>
envsubst < secure.yaml > tmp.yaml